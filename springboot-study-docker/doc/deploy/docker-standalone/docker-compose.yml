version: '3'
services:
  mysql:
    container_name: mysql
    build:
      context: ./mysql
      dockerfile: Dockerfile
    networks:
      docker_net:
        aliases:
          - mysql
    command: [
        'mysqld',
        '--default-authentication-plugin=mysql_native_password',
        '--innodb-buffer-pool-size=80M',
        '--character-set-server=utf8mb4',
        '--collation-server=utf8mb4_0900_ai_ci',
        '--default-time-zone=+8:00',
        '--lower-case-table-names=1'
    ]
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: abc123
    volumes:
      - /Users/voishion/work/server/docker/mysql/conf:/etc/mysql/conf.d
      - /Users/voishion/work/server/docker/mysql/logs:/logs
      - /Users/voishion/work/server/docker/mysql/data:/var/lib/mysql
    ports:
      - "3306:3306"

  db2:
    image: ibmcom/db2:11.5.7.0
    container_name: db2
    networks:
      docker_net:
        aliases:
          - db2
    privileged: true
    environment:
      LICENSE: accept
      DB2INST1_PASSWORD: abc123
      DBNAME: TESTDB
      ENABLE_ORACLE_COMPATIBILITY: "true"
    volumes:
      - /Users/voishion/work/server/docker/db2/data:/db2data
    ports:
      - "50000:50000"

  nacos:
    image: nacos/nacos-server:2.0.3
    container_name: nacos
    networks:
      docker_net:
        aliases:
          - nacos
    env_file:
      - /Users/voishion/work/server/docker/nacos/env/nacos-standlone-mysql.env
    volumes:
      - /Users/voishion/work/server/docker/nacos/standalone-logs/:/home/nacos/logs
      - /Users/voishion/work/server/docker/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties
    ports:
      - "8848:8848"
      - "9848:9848"
      - "9849:9849"
    depends_on:
      - mysql

  seata:
    image: seataio/seata-server:1.4.2
    container_name: seata
    networks:
      docker_net:
        aliases:
          - seata
    ports:
      - "8091:8091"
    environment:
      - SEATA_PORT=8091
      - SEATA_IP=127.0.0.1
      - SEATA_CONFIG_NAME=file:/root/seata-config/registry
    volumes:
      - /Users/voishion/work/server/docker/seata/config:/root/seata-config
      - /Users/voishion/work/server/docker/seata/logs:/root/logs

  sentinel:
    image: bladex/sentinel-dashboard:1.8.0
    container_name: sentinel
    networks:
      docker_net:
        aliases:
          - sentinel
    environment:
      - TZ=Asia/Shanghai
      - JAVA_OPTS="-Dserver.port=8858 -Dproject.name=sentinel-dashboard -Dcsp.sentinel.dashboard.server=localhost:8858 -Dsentinel.dashboard.auth.username=sentinel -Dsentinel.dashboard.auth.password=sentinel -Dserver.servlet.session.timeout=7200 -Djava.security.egd=file:/dev/./urandom -Dcsp.sentinel.api.port=8719"
    ports:
      - "8858:8858"

  redis:
    image: redis:6.2.6
    container_name: redis
    networks:
      docker_net:
        aliases:
          - redis
    volumes:
      - /Users/voishion/work/server/docker/redis/conf/redis.conf:/etc/redis/redis.conf:rw
      - /Users/voishion/work/server/docker/redis/data:/data:rw
      - /Users/voishion/work/server/docker/redis/logs:/logs:rw
    command: redis-server /etc/redis/redis.conf --appendonly yes
    ports:
      - "6379:6379"

  rabbitmq:
    image: rabbitmq:3.9.15-management
    container_name: rabbitmq
    networks:
      docker_net:
        aliases:
          - rabbitmq
    volumes:
      - /Users/voishion/work/server/docker/rabbitmq/log:/var/log/rabbitmq
      - /Users/voishion/work/server/docker/rabbitmq/data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=root
      - RABBITMQ_DEFAULT_PASS=123456
    ports:
      - "15672:15672"
      - "5672:5672"

  nginx:
    image: nginx:1.21.5
    container_name: nginx
    networks:
      docker_net:
        aliases:
          - nginx
    environment:
      TZ: 'Asia/Shanghai'
    volumes:
      - /Users/voishion/work/server/docker/nginx/conf.d:/etc/nginx/conf.d
      - /Users/voishion/work/server/docker/nginx/log:/var/log/nginx
      - /Users/voishion/work/server/docker/nginx/deploy:/usr/share/nginx
    command: nginx -g 'daemon off;'
    ports:
      #- "80:80"
      - "37950:37950"
      - "37951:37951"

networks:
  docker_net:
    driver: bridge